{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","setRecogResult","logo","image1Source","setImage1Source","image2Source","setImage2Source","gotLoginResult","setGotLoginResult","inAdmin","setInAdmin","name","setName","username","setUsername","ACL","setACL","phone","setPhone","email","setEmail","response","setResponse","imageTaken","setImageTaken","sendNewUserData","a","userData","fetch","method","headers","body","JSON","stringify","console","log","takePicture","response1","json","status","login","data","photo_url","className","onClick","style","flexDirection","src","alt","onSubmit","type","value","onChange","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.782ad0dd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {useState} from \"react\";\r\n\r\n\r\nfunction App() {\r\n    const [recogResult, setRecogResult] = useState()\r\n    const [chosenUserID, setChosenUserID] = useState(\"Пользователь не выбран\")\r\n    const [image1Source, setImage1Source] = useState(logo)\r\n    const [image2Source, setImage2Source] = useState(logo)\r\n    const [gotLoginResult, setGotLoginResult] = useState(false)\r\n\r\n    const [inAdmin, setInAdmin] = useState(false)\r\n\r\n    const [name, setName] = useState('')\r\n    const [username, setUsername] = useState('')\r\n    const [ACL, setACL] = useState('')\r\n    const [phone, setPhone] = useState('')\r\n    const [email, setEmail] = useState('')\r\n\r\n    const [loginUserID, setLoginUserID] = useState('')\r\n    const [loginName, setLoginName] = useState('')\r\n    const [loginUsername, setLoginUsername] = useState('')\r\n    const [loginACL, setLoginACL] = useState('')\r\n    const [loginPhone, setLoginPhone] = useState('')\r\n    const [loginEmail, setLoginEmail] = useState('')\r\n\r\n    const [response, setResponse] = useState('')\r\n\r\n    const [imageTaken, setImageTaken] = useState(false)\r\n\r\n    const sendUserData = async (userData) => {\r\n        try {\r\n            setChosenUserID(userData.user_id)\r\n            let response = await fetch('http://localhost:8000/', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            });\r\n            // let json = await response.json()\r\n            let text = await response.text()\r\n            setRecogResult(text)\r\n\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: userData loading failed:\", e)\r\n        }\r\n    }\r\n    const sendNewUserData = async () => {\r\n        try {\r\n            let userData = {\r\n                name: name,\r\n                username: username,\r\n                ACL: ACL,\r\n                email: email,\r\n                phone: phone,\r\n            }\r\n\r\n\r\n            let response2 = await fetch('http://localhost:8000/api_v1/main/users', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            });\r\n            // let json = await response.json()\r\n            // let text = await response.text()\r\n            // setRecogResult(text)\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: userData loading failed:\", e)\r\n        }\r\n    }\r\n    const takePicture = async () => {\r\n        try {\r\n            let response1 = await fetch('http://localhost:8000/api_v1/main/users/take_photo/', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n            });\r\n            let json = await response1.json()\r\n            if (json.status) {\r\n                setImageTaken(true)\r\n            }\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: take picture failed:\", e)\r\n        }\r\n    }\r\n\r\n    const login = async () => {\r\n        try {\r\n            setGotLoginResult(true)\r\n            let response = await fetch('http://localhost:8000/api_v1/main/users/login/', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                // body: JSON.stringify(userData)\r\n            });\r\n            let json = await response.json()\r\n            if (json.status) {\r\n                setRecogResult(json.status)\r\n                if (json.data) {\r\n                    setResponse(json.data)\r\n                    setImage1Source(json.data.photo_url)\r\n                    setImage2Source(json.data.photo_url)\r\n                }\r\n                // setLoginUserID(json.data.userId)\r\n                // setLoginName(json.data.name)\r\n                // setLoginUsername(json.data.username)\r\n                // setLoginACL(json.data.acl)\r\n                // setLoginPhone(json.data.phone)\r\n                // setLoginEmail(json.data.email)\r\n            } else {\r\n                setResponse('Not recognised')\r\n            }\r\n            // setChosenUserID(userData.user_id)\r\n            // let text = await response.text()\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: login failed:\", e)\r\n        }\r\n    }\r\n    const goToAdmin = () => {\r\n        setInAdmin(true)\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <div className=\"App-topbar\">\r\n                    <button className=\"App-topbar-btn\" onClick={goToAdmin}>\r\n                        Admin panel\r\n                    </button>\r\n                </div>\r\n                <div style={{flexDirection: 'row'}}>\r\n                    {!gotLoginResult && <img src={logo} className=\"App-logo\" alt=\"logo\"/>}\r\n                    {gotLoginResult && <div style={{flexDirection: \"row\"}}>\r\n                        <img src={image1Source} className=\"App-logo\" alt=\"image1\"/>\r\n                        <img src={image2Source} className=\"App-logo\" alt=\"image2\"/>\r\n                    </div>}\r\n                    <p>\r\n                        Biometric Face Recognition\r\n                    </p>\r\n                    <button className=\"Login-button\" onClick={login}>\r\n                        Login\r\n                    </button>\r\n                    {/*<button className=\"App-button\" onClick={()=>sendUserData({user_id: '4'})}>*/}\r\n                    {/*    4*/}\r\n                    {/*</button>*/}\r\n                </div>\r\n                <p className=\"App-result-area\">\r\n                    Response:<br/>\r\n                    {response}\r\n                    {/*userID: {userID}<br/>*/}\r\n                    {/*Recognised: {recogResult}<br/>*/}\r\n                    {/*Name: {loginName}<br/>*/}\r\n                    {/*Username: {loginUsername}<br/>*/}\r\n                    {/*ACL: {loginACL}<br/>*/}\r\n                    {/*Phone: {loginPhone}<br/>*/}\r\n                    {/*Email: {loginEmail}<br/>*/}\r\n                </p>\r\n                {/*<a*/}\r\n                {/*  className=\"App-link\"*/}\r\n                {/*  href=\"https://reactjs.org\"*/}\r\n                {/*  target=\"_blank\"*/}\r\n                {/*  rel=\"noopener noreferrer\"*/}\r\n                {/*>*/}\r\n                {/*  Learn React*/}\r\n                {/*</a>*/}\r\n                {inAdmin &&\r\n                <div>\r\n                    <form onSubmit={sendNewUserData}>\r\n                        <label>\r\n                            Name:\r\n                            <input type=\"text\" value={name} onChange={setName}/>\r\n                        </label>\r\n                        <br/>\r\n                        <br/>\r\n                        <label>\r\n                            Username:\r\n                            <input type=\"text\" value={name} onChange={setUsername}/>\r\n                        </label>\r\n                        <br/>\r\n                        <br/>\r\n                        <label>\r\n                            Email:\r\n                            <input type=\"text\" value={name} onChange={setEmail}/>\r\n                        </label>\r\n                        <br/>\r\n                        <br/>\r\n                        <label>\r\n                            Phone:\r\n                            <input type=\"text\" value={name} onChange={setPhone}/>\r\n                        </label>\r\n                        <br/>\r\n                        <br/>\r\n                        <label>\r\n                            ACL:\r\n                            <input type=\"text\" value={name} onChange={setACL}/>\r\n                        </label>\r\n                        <br/>\r\n                        <br/>\r\n                        {imageTaken && <input type=\"submit\" value=\"Отправить\"/>}\r\n                        {!imageTaken && <input type=\"submit\" value=\"Отправить\" disabled/>}\r\n                    </form>\r\n\r\n                    <button onClick={takePicture}>\r\n                        Take picture\r\n                    </button>\r\n\r\n                </div>\r\n                }\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}