{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","useState","recogResult","setRecogResult","chosenUserID","logo","image1Source","setImage1Source","image2Source","setImage2Source","gotLoginResult","setGotLoginResult","inAdmin","name","setName","username","sendNewUserData","a","userData","fetch","method","headers","body","JSON","stringify","console","log","login","response","json","data","photo_url","status","className","onClick","style","flexDirection","src","alt","onSubmit","type","value","onChange","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOAAe,MAA0B,iC,eCmI1BA,MA9Hf,WAAgB,IAAD,EAC2BC,qBAD3B,mBACJC,EADI,KACSC,EADT,OAE6BF,mBAAS,8HAFtC,mBAEJG,EAFI,aAG6BH,mBAASI,IAHtC,mBAGJC,EAHI,KAGUC,EAHV,OAI6BN,mBAASI,GAJtC,mBAIJG,EAJI,KAIUC,EAJV,OAKiCR,oBAAS,GAL1C,mBAKJS,EALI,KAKYC,EALZ,OAOmBV,oBAAS,GAP5B,mBAOJW,EAPI,aASaX,sBATb,mBASJY,EATI,KASEC,EATF,OAUqBb,qBAVrB,mBAUJc,EAVI,aAWWd,sBAXX,gCAYeA,sBAZf,gCAaeA,sBAbf,mBAiCLe,GAjCK,UAiCU,uCAAG,4BAAAC,EAAA,sEAEZC,EAAW,CACXL,KAAME,GAHM,SAKKI,MAAM,8BAA+B,CACtDC,OAAQ,OACRC,QAAS,CACL,eAAgB,kCAEpBC,KAAMC,KAAKC,UAAUN,KAVT,8DAgBhBO,QAAQC,IAAI,wCAAZ,MAhBgB,yDAAH,sDAmBfC,EAAK,uCAAG,8BAAAV,EAAA,sEAENN,GAAkB,GAFZ,SAGeQ,MAAM,8BAA+B,CACtDC,OAAQ,MACRC,QAAS,CACL,eAAgB,oCANlB,cAGFO,EAHE,gBAUWA,EAASC,OAVpB,OAUFA,EAVE,OAWNtB,EAAgBsB,EAAKC,KAAKC,WAC1BtB,EAAgBoB,EAAKC,KAAKC,WAG1B5B,EAAe0B,EAAKG,QAfd,kDAkBNP,QAAQC,IAAI,6BAAZ,MAlBM,0DAAH,qDAwBX,OACI,qBAAKO,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,qBAAKA,UAAU,aAAf,SACI,wBAAQA,UAAU,iBAAiBC,QAPjC,aAOF,2BAIJ,sBAAKC,MAAO,CAACC,cAAe,OAA5B,WACM1B,GAAkB,qBAAK2B,IAAKhC,EAAM4B,UAAU,WAAWK,IAAI,SAC5D5B,GAAkB,sBAAKyB,MAAO,CAACC,cAAe,OAA5B,UACf,qBAAKC,IAAK/B,EAAc2B,UAAU,WAAWK,IAAI,WACjD,qBAAKD,IAAK7B,EAAcyB,UAAU,WAAWK,IAAI,cAErD,2DAGA,wBAAQL,UAAU,eAAeC,QAASP,EAA1C,sBAOJ,oBAAGM,UAAU,kBAAb,qBACa7B,EAAa,uBACrBF,KAUJU,GACD,uBAAM2B,SAAUvB,EAAhB,UACI,wDAEI,uBAAOwB,KAAK,OAAOC,MAAO5B,EAAM6B,SAAU5B,OAE9C,uBAAO0B,KAAK,SAASC,MAAM,oEC/GhCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8741ab31.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './App.css';\r\nimport {useState} from \"react\";\r\n\r\n\r\nfunction App() {\r\n    const [recogResult, setRecogResult] = useState()\r\n    const [chosenUserID, setChosenUserID] = useState(\"Пользователь не выбран\")\r\n    const [image1Source, setImage1Source] = useState(logo)\r\n    const [image2Source, setImage2Source] = useState(logo)\r\n    const [gotLoginResult, setGotLoginResult] = useState(false)\r\n\r\n    const [inAdmin, setInAdmin] = useState(false)\r\n\r\n    const [name, setName] = useState()\r\n    const [username, setUsername] = useState()\r\n    const [ACL, setACL] = useState()\r\n    const [phone, setPhone] = useState()\r\n    const [email, setEmail] = useState()\r\n\r\n    const sendUserData = async (userData) => {\r\n        try {\r\n            setChosenUserID(userData.user_id)\r\n            let response = await fetch('http://localhost:8000/', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            });\r\n            // let json = await response.json()\r\n            let text = await response.text()\r\n            setRecogResult(text)\r\n\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: userData loading failed:\", e)\r\n        }\r\n    }\r\n    const sendNewUserData = async () => {\r\n        try {\r\n            let userData = {\r\n                name: username\r\n            }\r\n            let response = await fetch('http://localhost:8000/users', {\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                body: JSON.stringify(userData)\r\n            });\r\n            // let json = await response.json()\r\n            // let text = await response.text()\r\n            // setRecogResult(text)\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: userData loading failed:\", e)\r\n        }\r\n    }\r\n    const login = async () => {\r\n        try {\r\n            setGotLoginResult(true)\r\n            let response = await fetch('http://localhost:8000/login', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json;charset=utf-8'\r\n                },\r\n                // body: JSON.stringify(userData)\r\n            });\r\n            let json = await response.json()\r\n            setImage1Source(json.data.photo_url)\r\n            setImage2Source(json.data.photo_url)\r\n            // setChosenUserID(userData.user_id)\r\n            // let text = await response.text()\r\n            setRecogResult(json.status)\r\n\r\n        } catch (e) {\r\n            console.log(\"[X]\\t Error: login failed:\", e)\r\n        }\r\n    }\r\n    const goToAdmin = () => {\r\n\r\n    }\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <div className=\"App-topbar\">\r\n                    <button className=\"App-topbar-btn\" onClick={goToAdmin}>\r\n                        Admin panel\r\n                    </button>\r\n                </div>\r\n                <div style={{flexDirection: 'row'}}>\r\n                    {!gotLoginResult && <img src={logo} className=\"App-logo\" alt=\"logo\"/>}\r\n                    {gotLoginResult && <div style={{flexDirection: \"row\"}}>\r\n                        <img src={image1Source} className=\"App-logo\" alt=\"image1\"/>\r\n                        <img src={image2Source} className=\"App-logo\" alt=\"image2\"/>\r\n                    </div>}\r\n                    <p>\r\n                        Biometric Face Recognition\r\n                    </p>\r\n                    <button className=\"Login-button\" onClick={login}>\r\n                        Login\r\n                    </button>\r\n                    {/*<button className=\"App-button\" onClick={()=>sendUserData({user_id: '4'})}>*/}\r\n                    {/*    4*/}\r\n                    {/*</button>*/}\r\n                </div>\r\n                <p className=\"App-result-area\">\r\n                    userID: {chosenUserID}<br/>\r\n                    {recogResult}\r\n                </p>\r\n                {/*<a*/}\r\n                {/*  className=\"App-link\"*/}\r\n                {/*  href=\"https://reactjs.org\"*/}\r\n                {/*  target=\"_blank\"*/}\r\n                {/*  rel=\"noopener noreferrer\"*/}\r\n                {/*>*/}\r\n                {/*  Learn React*/}\r\n                {/*</a>*/}\r\n                {inAdmin &&\r\n                <form onSubmit={sendNewUserData}>\r\n                    <label>\r\n                        Имя:\r\n                        <input type=\"text\" value={name} onChange={setName}/>\r\n                    </label>\r\n                    <input type=\"submit\" value=\"Отправить\"/>\r\n                </form>\r\n                }\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}